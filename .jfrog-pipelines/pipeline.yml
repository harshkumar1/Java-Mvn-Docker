valuesFilePath: ./values.yml

resources:
  - name: src_repo_1
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.var.gitProvider }}
      path: {{ .Values.var.path }}
      branches:
        include: {{ .Values.var.branches }}
  - name: mvn_install_info_1
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: mvn_test_info_1
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: docker_build_info_1
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: docker_publish_info_1
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}

pipelines:
  - name: {{ .Values.var.pipelineName }}
    configuration:
      jfrogCliVersion: '2'                 # optional
      environmentVariables:
        readOnly:
          Dynamic_Tests: 
            default: 10
            description: Tests to be run in test suite ': Dynamic_Tests' 
            allowCustom: true
          Dynamic_1_Tests: 
            default: 10
            description: Tests to be run in test suite ': Dynamic_1_Tests' 
            allowCustom: true
          Dynamic_2_Tests: 
            default: 10
            description: Tests to be run in test suite ': Dynamic_2_Tests' 
            allowCustom: true
    steps:
    - name: mvn_build
      type: MvnBuild
      configuration:
        #affinityGroup: java_mvn_docker
        integrations:
          - name: {{ .Values.var.artifactory }} 
        inputResources:
          - name: src_repo_1
        mvnCommand: clean install -DskipTests           # optional
        #sourceLocation:       <string>      # optional
        #resolverSnapshotRepo: <string>      # optional
        #resolverReleaseRepo:  <string>      # optional
        #deployerSnapshotRepo: <string>      # optional
        #deployerReleaseRepo:  <string>      # optional
        #forceXrayScan:        <boolean>     # optional
        #failOnScan:           <boolean>     # default true
        #autoPublishBuildInfo: <string>      # optional
        #configFileLocation:   <string>      # optional
        #configFileName:       <string>      # optional
        outputResources:
          - name: mvn_install_info_1
      execution:
        onStart:
          - echo "Preparing for work..."
        onSuccess:
          - echo "Job well done!"
        onFailure:
          - echo "uh oh, something went wrong"
        onComplete: #always
          - echo "Cleaning up some stuff"

    - name: mvn_test
      type: MvnBuild
      configuration: ##save test
        #affinityGroup: java_mvn_docker
        integrations:
          - name: {{ .Values.var.artifactory }} 
      ##set run name
      ##set run description
      ##task -- slack integration
        inputResources:
          - name: src_repo_1
          - name: mvn_install_info_1
        mvnCommand: test                     # optional
        #sourceLocation:       <string>      # optional
        #resolverSnapshotRepo: <string>      # optional
        #resolverReleaseRepo:  <string>      # optional
        #deployerSnapshotRepo: <string>      # optional
        #deployerReleaseRepo:  <string>      # optional
        #forceXrayScan:        <string>      # optional
        #failOnScan:           <boolean>     # default true
        #autoPublishBuildInfo: <string>      # optional
        #configFileLocation:   <string>      # optional
        #configFileName:       <string>      # optional
        outputResources:
          - name: mvn_test_info_1
      execution:
        onStart:
          - echo "Preparing for work..."
        onSuccess:
          - echo "Job well done!"
        onFailure:
          - echo "uh oh, something went wrong"
        onComplete: #always
          - echo "Cleaning up some stuff"
          - ls -lh $res_src_repo_1_resourcePath/target/surefire-reports/
          - save_tests $res_src_repo_1_resourcePath/target/surefire-reports/