valuesFilePath: ./values.yml

resources:
  - name: src_repo_SampleTest
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.var.gitProvider }}
      path: {{ .Values.var.path }}
      branches:
        include: {{ .Values.var.branches }}
  - name: mvn_install_info_SampleTest
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: mvn_test_info_SampleTest
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: docker_build_info_SampleTest
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}
  - name: docker_publish_info_SampleTest
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.var.artifactory }}
      buildName: {{ .Values.var.pipelineName }}
      buildNumber: ${run_number}

pipelines:
  - name: {{ .Values.var.pipelineName }}
    configuration:
      jfrogCliVersion: '2'                 # optional
    steps:
    - name: mvn_build
      type: MvnBuild
      configuration:
        affinityGroup: java_mvn_docker
        integrations:
          - name: {{ .Values.var.artifactory }}
        inputResources:
          - name: src_repo_SampleTest
        mvnCommand: clean install -DskipTests           # optional
        outputResources:
          - name: mvn_install_info_SampleTest
        forceXrayScan: false
        failOnScan: false
        autoPublishBuildInfo: true
      execution:
        onStart:
          - echo "Preparing for work..."
          #- jf audit --mvn
        onSuccess:
          - echo "Uploading JAR to Artifactory!"
          - jf rt u --flat=true ${res_src_repo_resourcePath}/target/*.jar {{ .Values.var.mvn_repo }}/{{ .Values.var.pipelineName }}/
          - jf build-scan --fail=true {{ .Values.var.pipelineName }} ${run_number}
        onFailure:
          - echo "actions when step has failed"
        onComplete: #always
          - echo "actions to run always - fail or pass"

    - name: mvn_test
      type: MvnBuild
      configuration: ##save test
        affinityGroup: java_mvn_docker
        integrations:
          - name: {{ .Values.var.artifactory }} 
      ##set run name
      ##set run description
      ##task -- slack integration
        inputResources:
          - name: src_repo_SampleTest
          - name: mvn_install_info_SampleTest
        mvnCommand: test                     # optional
        outputResources:
          - name: mvn_test_info_SampleTest
      execution:
        onStart:
          - echo "Preparing for work..."
          - python3 --version
        onSuccess:
          - echo "Job well done!"
        onFailure:
          - echo "uh oh, something went wrong"
        onComplete: #always
          - echo "Cleaning up some stuff"
          - ls -lh $res_src_repo_resourcePath/target/surefire-reports/
          - save_tests $res_src_repo_resourcePath/target/surefire-reports/
